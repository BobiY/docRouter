{
  "content":[
    {"aboutRedux":[
        {
          "h3-title":"为什么需要 Redux ？"
        },
        {
          "content":[
              {
               "p1":"redux主要是用于处理react中得数据流，所以在你的react项目中，他就不是必须的；只有遇到 React 实在解决不了的问题，你才需要 Redux 。"
               }
             ]
        },
        {
          "h4-titleUse":"以下这几种情况你可以不考虑使用redux",
          "ul-Use":[
                  "1.用户的使用方式非常简单",
                  "2.用户之间没有协作",
                  "3.不需要与服务器大量交互，也没有使用 WebSocket",
                  "4.视图层（View）只从单一来源获取数据"
                ]
        },
        {
          "h4-titleUse":"以下这几种情况推荐你使用redux来处理数据",
          "ul-Use":[
                      "1.用户的使用方式复杂",
                      "2.不同身份的用户有不同的使用方式（比如普通用户和管理员）",
                      "3.多个用户之间可以协作",
                      "4.与服务器大量交互，或者使用了WebSocket",
                      "5.View要从多个来源获取数据"
                    ]
        }
      ]
    },{
      "start":[
        {
          "h3-title":"开始学习 Redux"
        },
        {
          "content":[
                       {
                         "p1":" React 作为一个典型的 UI 层的框架，主要的功能是在展示页面并不是在处理数据方面；在遇到数据量大，而且用户交互量大的时候，往往需要借助其他架构去完成数据处理， React 官方提出了 Flux 的思想，主要是通过单行数据流，也就是用户操作 ==> 数据处理 ==> 视图改变。"
                       },{
                         "p2":"在github社区有一些优秀的架构，比如 Reflux 和 Redux。本文将为你介绍 Redux的实现；通过本文，你可以学习到怎么使用 Redux 以及一些 Redux 的简单原理分析。"
                       },{
                         "p3":"希望通过本教程，你可以掌握 Redux 的基本用法，并能为以后的实战项目打下基础。"
                       }

                   ]

        },{
          "h4-title":"Redux 相关知识的简单介绍"
        },{
          "contnet":[
             {
               "p1":"Redux 主要分为三部分，store action reducer 他们三个共同协作构成了 Redux 的完整数据流，在这里不对他们三个进行展开说明，下面会有详细的讲解。下面来简单看一下他们三个的简单代码实现"
             },{
               "image":"image/action.jpg"
             },{
               "image":"image/reducer.jpg"
             },{
               "image":"image/store.jpg"
             },{
               "p2":"上面的三个图片一次展示的是 action reducer store 的创建代码，这里只是简单地展示，在下面的章节中，我们将分别展开讲解。"
             }
          ]
        }
      ]
    },{
      "action":[
        {
          "h3-title":"Action"
        },
        {
          "content":[
            {
              "p1":"Action 顾名思义，就是行为行动的含义，在 Redux 中代表的是用户的操作或者行为。在实际应用中，你有多少个与数据操作相关的行为，就会有多少个与之对应的 Action；这需要注意的是，不是用了 Redux 以后，所有的 React 的事件操作都得用 Action 来实现，这要看这个用户的行为是不是需要改变数据；举个例子，如果用户点击某个按钮后，需要让某个组件隐藏，那你就不需要 Action ，React 的事件就可以满足。最重要的是你要记住，Redux 只是辅助 React完成更复杂操作的架构，主体还是 React，这一点要牢记。"
            }
          ]
        },
        {
          "h4-title":"Action 的基本创建方式"
        },
        {
          "content":[
              {
                "image":"image/action.jpg"
              },{
                "p1":"Action 在 Redux中是一个对象的形式，其中必须包含 Type 字段，这个字段的值一般用大写字母，是用来说明 Action 的事件类型，不同单词之间用下划线进行拼接；这个字段主要作用是帮助 Reducer 去识别用户发起的是哪种行为，并对数据进行相应的处理。"
              },{
                "p2":"Action 作为用户发起的行为，是可以携带数据的，你可以任意的在 Action 的创建对象中添加对应的携带数据的字段。但上面的创建方式看起来很简易，可读性也不高，特别是当 Action 需要携带数据时，我们会很难去识别究竟携带的是什么数据。这时，我们就引入了 Action Create 的概念。"
              }
          ]
        },
        {
          "h4-title":"Action Create"
        },{
          "content":[
            {
              "p1":"这种形式的 Action 是以一个函数的形式去创建 Action ，这个函数最后会返回一个上面基本形式的 Action  对象，这种创建 Action 的形式更符合我们封装的思想，所以推荐使用；这个形式的 Action 也是我们创建异步 Action 和更加复杂 Action的基础。下面是一个以函数方式创建的 Action 的代码。"
            },{
              "image":"image/actionCreate.jpg"
            },{
              "p2":"以上两种方式就是 Action 的两种创建方式，在使用时你可以根据实际情况来具体的选择适合你的方式。"
            }
          ]
        }

      ]
    },{
      "reducer":[
        {
          "h3-title":"Reducer"
        },{
          "content":[
            {
              "p1":"Reducer 是 Redux 的数据处理中心，它在接收到用户发出的 Action 以后，会根据 Action 的 Type 字段对数据进行相应的处理；在Redux中，数据用 State 表示，这与 React中的 State 有点类似，但不等同。下面是一个 Reducer 的例子，来具体体会一下 Reducer 的魅力。"
            },{
              "image":"image/reducer.jpg"
            },{
              "p2":"可以看到，Reducer 是一个由 Switch 语句为主体的函数，这样的写法，会大大缩短数据处理的时间；这里还有一点需要注意，Reducer 是一个纯函数，这样子 Reducer 的数据操作就是透明的，我们输入什么内容，就可以拿到我们期望的输出值，也就是输入什么，就可以的到对应的输出。"
            }
          ]
        },
        {
          "h4-title":"关于纯函数的说明"
        },{
          "content":[
            {
              "p1":"上面提到 Reducer 是一个纯函数，相信没有函数时编程经验的开发一定不了解这是个什么意思；在这里，我只做简单的介绍，以保证你在使用 Reducer 时不会因为纯函数而出错。如果你对此有兴趣，可以自行的搜索相关教程进行学习。"
            }
          ]
        },{
          "h4-title":"纯函数的特点及使用注意事项",
          "ul-Use":[
                      "1.  函数与外界交换数据的唯一渠道就是参数和返回值",
                      "2.  函数接受外部输入信息的唯一方式只能通过参数传入",
                      "3.  函数输出的数据只能通过返回值将数据传递到函数外",
                      "4.  纯函数只能通过参数传入数据，不能访问外不变量",
                      "5.  纯函数不能修改传入的参数，因为这样有可能会把一些信息通过输入参数，夹带到外界"
                    ]
        },{
          "h4-title":"Reducer 的定义注意事项"
        },{
          "content":[
            {
              "p1":"上面简单的介绍了一下纯函数的相关注意事项，但是迁移到实际应用中对你来说可能有些错误你依然会犯，下面将针对纯函数的使用规则来说明 Reducer 的使用注意事项。"
            }
          ]
        },{
          "ul-stand":[
            "1.不能修改传入的参数，这样子有可能会导致输出不确定，或者输出错误",
            "2.执行有副作用的操作，如API跳转和路由跳转，还有异步操作",
            "3.调用非纯函数，如Date.now()和Math.random（）"
          ]
        },{
          "content":[
            {
              "p1":"根据上面的注意事项，下面给出了一个例子，这里我会具体的说明这个 Reducer 中的错误之处，你可以根据上面的注意事项进行一一验证。"
            },{
              "image":"image/eReducer.png"
            },{
              "p2":"在上面的例子中，State 是一个数组，在执行 ADD 操作时，我们将 1 加入了 State数组中；这种操作是不允许的，因为纯函数不允许你去修改传入的参数，如果你有这样的操作，Redux将会在控制台输出错误信息或者你的 Reducer 不能正确的返回处理后的数据。"
            },{
              "p3":"还有一点要记住，如果你的传入的 State 是一个对象时，你要特别注意，要返回一个全新的对象，Redux 才会认为你的 State 进行了更改，因为对象时引用类型，它指向的是内存中的一个地址，如果你仅仅改变地址里面的数据，而不改变引用地址，Redux 会认为你的数据没有发生改变，这是你就要对返回值进行修改。看下面的例子。"
            },{
              "image":"image/sReducer.png"
            },{
              "p3":"在上面例子中，我们使用了 Array.slice() 方法对传入的参数进行了处理，因为这个方法会返回一个新的数组，这样 Redux 就能知道你的数据发生了改变，进而通知视图改变。所以在参数是数组或者对象时要特别注意这一点，不然就会导致虽然你发起了 Action 系统也没有报错，但是视图就是没有更新的情况。下面的一个例子是怎么处理 State是对象时的情况，这将作为本节的结尾，里面用到的 ES6 的语法，不熟悉的读者自己搜索学习。"
            },{
              "image":"image/oReducer.png"
            }
          ]
        }
      ]
    },{
      "store":[
        {
          "h3-title":"Store"
        },{
          "content":[
            {
              "p1":"Store 作为 Redux 的核心部分，它肩负着发布 Action ，监听 State 的变化通知视图更新以及将根据用户发起的 Action 去通知 Reducer 去处理数据。所以， Store 的功能很强大，在这一节，我将对 Store 由浅入深的讲解其用法及其简单的实现原理。"
            }
          ]
        },{
          "h4-title":"Store 的创建"
        },{
          "content":[
            {
              "p1":"Store 需要我们去手动创建，Redux 给我们提供了 createStore API 去创建一个 Store ，这个 API 需要传递我们创建的 Reducer 作为参数传入。看下面例子。"
            },{
              "image":"image/createStore.png"
            }
          ]
        },{
          "h4-title":"Store 的 API"
        },{
          "content":[
            {
              "p1":"Store 的 API 有三个，分别是 dispatch subscribe getState ,这三个 API 就可以将 React 和 Redux 联系起来，就行相应的操作和数据处理。下面将一一说明其用法。"
            }
          ]
        },{
          "h4-title":"Dispatch"
        },{
          "content":[
            {
              "p1":"这个 API 的用法简单，就是用来发布你定义好的 Action ，具体的做法如下："
            },{
              "image":"image/dispatch.png"
            },{
              "p2":"把它当做事件处理函数来执行就可以使用，当然如果你是使用 Action Create 的方式创建的 Action ，直接将你的创建函数作为参数传给 Dispatch 即可，如下所示："
            },{
              "image":"image/Cdispatch.png"
            },{
              "p3":"以上就是 Diapatch 的用法，不是全部，但掌握了这些，足够你去写一个应用来巩固你学到的 Redux 了。"
            }
          ]
        },{
          "h4-title":"Subscribe"
        },{
          "content":[
            {
              "p1":"Subscribe 使用起来更简单，它的作用就是监听用户操作，告诉视图更新，因为这个 API 在实际开发中用的不多，这里就不做过多的介绍，这是对其用法进行代码展示。代码如下："
            },{
              "image":"image/subscribe.png"
            },{
              "p2":"这里做的事就是当用户发起 Action ，数据改变的时候，执行 recder 方法对组件进行重新渲染，这里具体是怎么实现的下面会有简单的说明，这里就不做太多的说明；这里传入的参数一定是会触发组件重新渲染的方法。"
            },{
              "p3":"最后，在前面设定完监听函数的时候，你如果像取消监听，可以执行以下代码："
            },{
              "image":"image/cancleSub.png"
            }
          ]
        },{
          "h4-title":"getState"
        },{
          "content":[
            {
              "p1":"这个 API 的使用方法更加的简单，就是获取当前状态下的 State 数据。用法如下："
            },{
              "image":"image/getState.png"
            },{
              "p2":"这个 API 的用法如上图，他能在任意时刻，拿到当前状态下的 State 的值，但是我们一般不会这样显式的调用，有其他工具会帮我们拿到这个值，并且绑定到组件上。"
            }
          ]
        },{
          "h3-title":"Store 的简单实现"
        },{
          "content":[
            {
              "p1":"Store 作为 Redux 的核心，拥用众多的方法，所以其源码也会看起来让你头大，为了降低大家的理解难度，我在这里放一个简单的 Store 实现代码，这只是帮助你理解 Store 究竟都做了什么事情，并不是它真正的源码。"
            },{
              "image":"image/scoreStore.png"
            }
          ]
        }
      ]
    },{
      "hand_movement":[
        {
          "h3-title":"React 和 Redux 的手动连接"
        },{
          "content":[
            {
              "p1":"要是用 Redux 对 React 进行数据处理，就要将 Redux 和 React 组件连接起来，这样才能把他们两个结合起来一起运用，下面是一个计数器的小例子，展示的是手动连接，虽然在实际运用中，我们很少用这种方式，但学会了这种连接方式，对后面的自动连接的代码理解起来也会变得简单。"
            },{
              "image":"image/exampleCount.png"
            },{
              "p2":"上面的代码是对前面的知识的综合例子，你可以手动的去写一下作为练习。看到这，如果你只是想知道什么是 Redux 以及它的简单应用，以上章节的知识就足够了，在下面的章节中将会涉及到一些难点，如果你没有深入学习的打算的话，就可以结束 Redux 部分的学习，开始 React 全家桶的其他部分的学习。"
            }
          ]
        }
      ]
    },{
      "react-redux":[
        {
          "h3-title":"使用 react-redux 连接"
        },{
          "content":[
            {
              "p1":"这种方式主要是使用 react-redux 提供的 Provider 组件和 connect 方法对我们自定义的组件进行包装实现的。具体过程看下图："
            },{
              "image":"image/rR.png"
            },{
              "p2":"在上图中，我们使用了 reacr-redux 对 React 和 Redux 进行了连接，可以看到 connect 和Provider组件的使用，下面我们展开说明他们两个的用法"
            }
          ]
        },{
          "h4-title":"Connect 使用"
        },{
          "content":[
            {
              "p1":"在使用之前，我们需要搞清楚一个概念，就是，组件在经过 Connect 加工以后，就会变成容器组件，而非 UI 组件，这里我们首要的问题就是弄清楚容器组件和 UI 组件的区别，这样在使用 Connect 时，才会更加的心应手。"
            }
          ]
        },{
          "h4-title":"容器组件和 UI 组件"
        },{
          "content":[
            {
              "p1":"下面这张图将展示容器组件和 UI 组件各自关心的事情有什么不同。"
            },{
              "image":"image/ui.png"
            },{
              "p2":"上图中的展示组件就是 UI 组件，这里不要太多纠结，上面清晰地说明了容器组件和 UI 组件各自的作用，简单地说容器组件主要负责的是组件的逻辑实现，而 UI 组件主要负责的是页面的视图展示。"
            }
          ]
        },{
          "h4-title":"Connect"
        }
      ]
    }
  ]
}
