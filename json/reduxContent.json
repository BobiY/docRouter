{
  "content":[
    {"aboutRedux":[
        {"h3-title":"为什么需要 Redux ？"},
        {"content":[{"p1":"redux主要是用于处理react中得数据流，所以在你的react项目中，他就不是必须的；只有遇到 React 实在解决不了的问题，你才需要 Redux 。"}]},
        {
          "h4-titleUse":"以下这几种情况你可以不考虑使用redux",
          "ul-Use":[
                  "1.用户的使用方式非常简单",
                  "2.用户之间没有协作",
                  "3.不需要与服务器大量交互，也没有使用 WebSocket",
                  "4.视图层（View）只从单一来源获取数据"
                ]
        },
        {
          "h4-titleUse":"以下这几种情况推荐你使用redux来处理数据",
          "ul-Use":[
                      "1.用户的使用方式复杂",
                      "2.不同身份的用户有不同的使用方式（比如普通用户和管理员）",
                      "3.多个用户之间可以协作",
                      "4.与服务器大量交互，或者使用了WebSocket",
                      "5.View要从多个来源获取数据"
                    ]
        }
      ]
    },{
      "start":[
        {"h3-title":"开始学习 Redux"},
        {"content":[
                       {
                         "p1":" React 作为一个典型的 UI 层的框架，主要的功能是在展示页面并不是在处理数据方面；在遇到数据量大，而且用户交互量大的时候，往往需要借助其他架构去完成数据处理， React 官方提出了 Flux 的思想，主要是通过单行数据流，也就是用户操作 ==> 数据处理 ==> 视图改变。"
                       },{
                         "p2":"在github社区有一些优秀的架构，比如 Reflux 和 Redux。本文将为你介绍 Redux的实现；通过本文，你可以学习到怎么使用 Redux 以及一些 Redux 的简单原理分析。"
                       },{
                         "p3":"希望通过本教程，你可以掌握 Redux 的基本用法，并能为以后的实战项目打下基础。"
                       }

                   ]

        },{
          "h4-title":"Redux 相关知识的简单介绍"
        },{
          "contnet":[
             {
               "p1":"Redux 主要分为三部分，store action reducer 他们三个共同协作构成了 Redux 的完整数据流，在这里不对他们三个进行展开说明，下面会有详细的讲解。下面来简单看一下他们三个的简单代码实现"
             },{
               "image":"image/action.jpg"
             },{
               "image":"image/reducer.jpg"
             },{
               "image":"image/store.jpg"
             },{
               "p2":"上面的三个图片一次展示的是 action reducer store 的创建代码，这里只是简单地展示，在下面的章节中，我们将分别展开讲解。"
             }
          ]
        }
      ]
    },{
      "action":[
        {"h3-title":"Action"},
        {"h4-title":"Action 的简易创建方式"},
        {"content":[
              {
                "image":"image/action.jpg"
              },{
                "p1":"Action 在 Redux中是一个对象的形式，其中必须包含 Type 字段，这个字段的值一般用写字母，不同单词之间用下划线进行拼接；这个字段会帮助 Reducer 去识别用户发起的是哪种行为，并对数据进行相应的处理。"
              },{
                "p2":"Action 作为用户发起的行为，是可以携带数据的，但上面的创建方式看起来很简易，可读性也不高，特别是当 Action 需要携带数据时，我们会很难去识别究竟携带的是什么数据。这时，我们就引入了 Action Create 的概念。"
              }
          ]},
        {"h4-title":"Action Create"}
      ]
    }
  ]
}
